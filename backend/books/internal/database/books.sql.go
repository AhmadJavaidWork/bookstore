// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: books.sql

package database

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (name, author_id, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
RETURNING id, name, author_id, deleted_at, created_at, updated_at
`

type CreateBookParams struct {
	Name     string
	AuthorID int32
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Name, arg.AuthorID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AuthorID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
UPDATE books
SET deleted_at=NOW()
WHERE id=$1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT books.id, books.name, books.author_id, authors.name AS author_name
FROM books
JOIN authors
  ON books.author_id=authors.id
  AND books.deleted_at IS NULL
`

type GetAllBooksRow struct {
	ID         int32
	Name       string
	AuthorID   int32
	AuthorName string
}

func (q *Queries) GetAllBooks(ctx context.Context) ([]GetAllBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBooksRow
	for rows.Next() {
		var i GetAllBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AuthorID,
			&i.AuthorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookById = `-- name: GetBookById :one
SELECT books.id, books.name, books.author_id, authors.name AS author_name
FROM books
JOIN authors
  ON books.author_id=authors.id
  AND books.id = $1
  AND books.deleted_at IS NULL
`

type GetBookByIdRow struct {
	ID         int32
	Name       string
	AuthorID   int32
	AuthorName string
}

func (q *Queries) GetBookById(ctx context.Context, id int32) (GetBookByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getBookById, id)
	var i GetBookByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AuthorID,
		&i.AuthorName,
	)
	return i, err
}

const getBookByName = `-- name: GetBookByName :many
SELECT books.id, books.name, books.author_id, authors.name AS author_name
FROM books
JOIN authors
  ON books.author_id=authors.id
  AND books.name LIKE $1
  AND books.deleted_at IS NULL
`

type GetBookByNameRow struct {
	ID         int32
	Name       string
	AuthorID   int32
	AuthorName string
}

func (q *Queries) GetBookByName(ctx context.Context, name string) ([]GetBookByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookByNameRow
	for rows.Next() {
		var i GetBookByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AuthorID,
			&i.AuthorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
